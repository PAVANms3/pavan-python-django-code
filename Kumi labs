r=4
col=5
   
# Function to find out minimum steps 
def findMinSteps(mat, n, m, dp,vis): 
  
    # boundary edges reached 
    if (n == 0 or m == 0 or n == (r - 1) or m == (col - 1)): 
        return 0
      
   
    # already had a route through this 
    # point, hence no need to re-visit 
    if (dp[n][m] != -1): 
        return dp[n][m] 
   
    # visiting a position 
    vis[n][m] = True
   
    ans1, ans2, ans3, ans4=10**9,10**9,10**9,10**9
  
   
    # vertically up 
    if (mat[n - 1][m] == 0): 
        if (vis[n - 1][m]==False): 
            ans1 = 1 + findMinSteps(mat, n - 1, m, dp, vis) 
      
   
    # horizontally right 
    if (mat[n][m + 1] == 0): 
        if (vis[n][m + 1]==False): 
            ans2 = 1 + findMinSteps(mat, n, m + 1, dp, vis) 
      
   
    # horizontally left 
    if (mat[n][m - 1] == 0): 
        if (vis[n][m - 1]==False): 
            ans3 = 1 + findMinSteps(mat, n, m - 1, dp, vis) 
      
   
    # vertically down 
    if (mat[n + 1][m] == 0): 
        if (vis[n + 1][m]==False): 
            ans4 = 1 + findMinSteps(mat, n + 1, m, dp, vis) 
      
   
    # minimum of every path 
    dp[n][m] = min(ans1, min(ans2, min(ans3, ans4))) 
    return dp[n][m] 
  
   
# Function that returns the minimum steps 
def minimumSteps(mat, n, m): 
  
    # index to store the location at 
    # which you are standing 
    twox = -1
    twoy = -1
   
    # find '2' in the matrix 
    for i in range(n):  
        for j in range(m):  
            if (mat[i][j] == 2): 
                twox = i 
                twoy = j 
                break
              
          
        if (twox != -1): 
            break
      
   
    # Initialize dp matrix with -1 
    dp=[[-1 for i in range(col)] for i in range(r)] 
      
   
    # Initialize vis matrix with false 
    vis=[[False for i in range(col)] for i in range(r)] 
      
   
    # Call function to find out minimum steps 
    # using memoization and recursion 
    res = findMinSteps(mat, twox, twoy, dp, vis) 
   
    # if not possible 
    if (res >= 10**9): 
        return -1
    else: 
        return res 
  
   
# Driver Code 
  
  
mat= [ [ 1, 1, 1, 0, 1 ], 
      [ 1, 0, 0, 0, 1 ], 
      [ 0, 0, 1, 0, 1 ], 
      [ 1, 0, 1, 1, 0 ] ] 
  
print(minimumSteps(mat, r, col)) 
  
